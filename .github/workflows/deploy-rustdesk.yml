name: Deploy RustDesk (Terragrunt)

on:
  pull_request:
    paths:
      - 'infra/**'
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

env:
  TG_VERSION: '0.91.3'
  TF_VERSION: '1.9.0'
  WORKING_DIR: 'infra/live/dev/rustdesk'

jobs:
  plan:
    name: Terragrunt Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    env:
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_ssh_keys: ${{ secrets.TF_VAR_SSH_KEYS }}
      TF_VAR_region: ${{ secrets.TF_VAR_REGION }}
      TF_VAR_size: ${{ secrets.TF_VAR_SIZE }}
      TF_VAR_image: ${{ secrets.TF_VAR_IMAGE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: true

      - name: Install Terragrunt
        uses: gruntwork-io/terragrunt-action@v3
        with:
          tg_version: ${{ env.TG_VERSION }}
          tf_path: 'terraform'

      - name: Terragrunt Format Check
        working-directory: ${{ env.WORKING_DIR }}
        run: terragrunt hclfmt --terragrunt-check --terragrunt-non-interactive
        continue-on-error: true

      - name: Terragrunt Init
        working-directory: ${{ env.WORKING_DIR }}
        run: terragrunt init --terragrunt-non-interactive

      - name: Terragrunt Validate
        working-directory: ${{ env.WORKING_DIR }}
        run: terragrunt validate --terragrunt-non-interactive

      - name: Terragrunt Plan
        id: plan
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          set +e
          terragrunt plan --terragrunt-non-interactive -out=plan.tfplan -detailed-exitcode
          PLAN_EXIT_CODE=$?
          set -e
          
          echo "exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Generate human-readable plan
          terragrunt show plan.tfplan > plan.txt
          
          # Exit with original code (0=no changes, 1=error, 2=changes)
          if [ $PLAN_EXIT_CODE -eq 1 ]; then
            exit 1
          fi

      - name: Upload Plan Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terragrunt-plan-${{ github.sha }}
          path: |
            ${{ env.WORKING_DIR }}/plan.tfplan
            ${{ env.WORKING_DIR }}/plan.txt
          retention-days: 30

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planPath = '${{ env.WORKING_DIR }}/plan.txt';
            let plan = 'Unable to read plan output';
            
            try {
              plan = fs.readFileSync(planPath, 'utf8');
              // Truncate if too long (GitHub has comment size limits)
              if (plan.length > 65000) {
                plan = plan.substring(0, 65000) + '\n\n... (truncated)';
              }
            } catch (error) {
              console.error('Error reading plan:', error);
            }
            
            const output = `#### Terragrunt Plan ðŸ“Š
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${plan}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  apply:
    name: Terragrunt Apply
    runs-on: ubuntu-latest
    needs: plan
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment:
      name: production
      url: ${{ steps.output.outputs.server_ip }}
    env:
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_ssh_keys: ${{ secrets.TF_VAR_SSH_KEYS }}
      TF_VAR_region: ${{ secrets.TF_VAR_REGION }}
      TF_VAR_size: ${{ secrets.TF_VAR_SIZE }}
      TF_VAR_image: ${{ secrets.TF_VAR_IMAGE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: true

      - name: Install Terragrunt
        uses: gruntwork-io/terragrunt-action@v3
        with:
          tg_version: ${{ env.TG_VERSION }}
          tf_path: 'terraform'

      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: terragrunt-plan-${{ github.sha }}
          path: ${{ env.WORKING_DIR }}

      - name: Terragrunt Init
        working-directory: ${{ env.WORKING_DIR }}
        run: terragrunt init --terragrunt-non-interactive

      - name: Terragrunt Apply
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ -f plan.tfplan ]; then
            echo "Applying saved plan..."
            terragrunt apply --terragrunt-non-interactive plan.tfplan
          else
            echo "No plan found, running auto-approve apply..."
            terragrunt apply --auto-approve --terragrunt-non-interactive
          fi

      - name: Capture Outputs
        id: output
        if: always()
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          terragrunt output -json > outputs.json || echo "{}" > outputs.json
          
          # Extract server IP if it exists (adjust key name as needed)
          SERVER_IP=$(jq -r '.server_ip.value // empty' outputs.json)
          if [ -n "$SERVER_IP" ]; then
            echo "server_ip=http://${SERVER_IP}" >> $GITHUB_OUTPUT
          fi

      - name: Upload Outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terragrunt-outputs-${{ github.sha }}
          path: ${{ env.WORKING_DIR }}/outputs.json
          retention-days: 90

      - name: Deployment Summary
        if: success()
        run: |
          echo "## ðŸš€ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Outputs" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat ${{ env.WORKING_DIR }}/outputs.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY